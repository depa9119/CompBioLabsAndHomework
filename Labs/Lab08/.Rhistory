== are equal
5 >= 4
#TRUE
5 > 4
#TRUE
5 < 4
#FALSE
5 <= 4
#FALSE
5 != 4
#TRUE
5 == 4
#FALSE
echo"I would like $x cookies"
base <- 10
height <- 9
triangleArea <- 0.5 * base * height
show(triangleArea)
return(myarea)
triangleArea <- function(base, height) {
myarea <- 0.5 * base * height
return(myarea)
}
triangleArea(10, 9)
triangleArea(5, 5)
abs(5)
abs(-2.3)
vector <- c(1.1, 2, 0, -4.3, 9, -12)
abs(vector)
ex1 <- abs(5)
ex2 <- abs(-2.3)
ex3 <- vector <- c(1.1, 2, 0, -4.3, 9, -12)
ex3 <- c(1.1, 2, 0, -4.3, 9, -12)
abs(ex3)
show(abs(ex3))
show(ex2)
show(ex1)
a <- 4
myabsfx <- function(a) {
if(a >= 0) {
print(a)
}
else {
a * (-1)
print(a)
}
}
myAbs <- function(a) {
if(a >= 0) {
print(a)
}
else {
a * (-1)
print(a)
}
}
a <- 4
myAbs(4)
myAbs(-4)
abs(ex1)
abs(ex2)
?function
q
myAbs <- function(a) {
if(a <= 0) {
print(a)
}
else if (x >= 0) {
a <- a * (-1)
}
return(a)
}
myAbs(ex1)
ex1 <- 5
ex2 <- -2.3
ex3 <- c(1.1, 2, 0, -4.3, 9, -12)
myAbs(ex1)
myAbs <- function(a) {
if(a <= 0) {
print(a)
}
else if (x >= 0) {
a <- a * (-1)
}
}
myAbs(ex1)
myAbs <- function(a) {
if(a <= 0) {
print(a)
}
else if (a >= 0) {
a <- a * (-1)
}
return(a)
}
myAbs(ex1)
myAbs(ex2)
myAbs <- function(a) {
if(a > 0) {
print(a)
}
else if (a < 0) {
a <- a * (-1)
}
return(a)
}
myAbs(ex1)
myAbs(ex2)
myAbs(ex3)
myAbs <- function(a) {
if(a < 0) {
a <- a * (-1)
}
return(a)
}
myAbs(ex1)
myAbs(ex2)
myAbs(ex3)
?ifelse
myAbs <- function (a) {
ifelse(a>0, print(a), a * (-1))
}
myAbs(ex1)
myAbs(ex2)
myAbs(ex3)
myAbs <- function (a) {
ifelse(a>0, a, (a * (-1)))
}
myAbs(ex1)
myAbs(ex2)
myAbs(ex3)
ex3
myAbs <- function(a) {
if(a > 0) {
a
}
else if (a < 0) {
a * (-1)
}
return(a)
}
myAbs(ex1)
myAbs(ex2)
myAbs <- function(a) {
if(a > 0) {
a
}
else if (a < 0) {
(a * (-1))
}
return(a)
}
myAbs(ex1)
myAbs(ex2)
myAbs(ex3)
myAbs <- function (a) {
ifelse(a>0, a, (a * (-1)))
}
myAbs(ex1)
myAbs(ex2)
myAbs(ex3)
myAbs2 <- function (a) {
ifelse(a>0, a, (a * (-1)))
}
myAbs2(ex1)
myAbs2(ex2)
myAbs2(ex3)
myAbs2 <- function (a) {
ifelse(a>=0, a, (a * (-1)))
}
myAbs2(ex1)
myAbs2(ex2)
myAbs2(ex3)
?return
myAbs1 <- function(a) {
if(a > 0) {
return(a)
}
else if (a < 0) {
return(a * (-1))
}
}
myAbs1(ex1)
myAbs1(ex2)
myAbs1(ex3)
myAbs1 <- function(a) {
if(a > 0) {
for (i in seq(a)) {
a
}
}
else if (a < 0) {
for (i in seq(a)) {
a <- a * (-1)
}
}
return(a)
}
myAbs1(ex1)
myAbs1(ex2)
myAbs1(ex3)
myAbs1 <- function(a) {
for (i in 1:length(a)){
if (a[i] < 0) {
a[i] <- a[i] * (-1)
}
}
return(a)
}
a <- c(1.1, 2, 0, -4.3, 9, -12)
myAbs1(a)
myAbs1 <- function(a) {
for (i in 1:length(a)){
if (a[i] < 0) {
a[i] <- a[i] * (-1)
}
}
return(a)
}
myAbs1(ex1)
myAbs1(ex2)
myAbs1(ex3)
myAbs1(ex1)
myAbs2(ex2)
myAbs3(ex3)
myAbs2(ex1)
myAbs2(ex2)
myAbs2(ex3)
show(myAbs2(ex3))
fib <- rep_len(1, 20)
fib
fib[1] <- 0
fib[2] <- 1
fib
for(i in 3:20) {
fib[i] <- fib[i-1] + fib[i-2]
print(fib[i])
}
fib[1] <- 0
fib[2] <- 1
fib
fib[1] <- 1
fib
fib
for(i in 3:20) {
fib[i] <- fib[i-1] + fib[i-2]
print(fib[i])
}
fib <- rep_len(1, 20)
fib[1] <- 1
fib[2] <- 1
fib
fib <- rep_len(1, 20)
fib
fibOLD[1] <- 1
fibOLD
fibMOD[1] <- 0
fibMOD
for(i in 3:20) {
fibOLD[i] <- fibOLD[i-1] + fibOLD[i-2]
print(fibOLD[i])
}
fibOLD[1] <- 1
fibOLD
fib <- rep_len(1, 20)
fib
fib[1] <- 1
fib
fib[1] <- 0
fib
for(i in 3:20) {
fib[i] <- fib[i-1] + fib[i-2]
print(fib[i])
}
fibSeq <- function(n, s) {
fib <- rep_len(0, s)
fib[2] <- 1
fib[1] <- n
for(i in 3:s) {
fib[i] <- fib[i-1] + fib[i-2]
}
return(fib)
}
fibSeq(0, 20)
fib(1, 20)
fibSeq(1, 20)
fibNEW <- rep_len(1, 20)
fibNEW[1] <- 0
fibNEW
for(i in 3:20) {
fibNEW[i] <- fibNEW[i-1] + fibNEW[i-2]
print(fibNEW[i])
}
fibOLD <- rep_len(1, 20)
for(i in 3:20) {
fibOLD[i] <- fibOLD[i-1] + fibOLD[i-2]
print(fibOLD[i])
}
fibfx <- function(n, s) {
fib <- rep_len(0, s)
fib[2] <- 1
fib[1] <- n
for(i in 3:s) {
fib[i] <- fib[i-1] + fib[i-2]
}
return(fib)
}
fibfx(0, 20)
fibfx(1, 20)
logisticGrowthModel <- function(r, K, population) {
for (i in seq(1,12)) {
population <- population +  r * population * ((K - population)/K)
print(population)
}
}
time <- seq(1:12)
K <- 10000
r <- .8
population <- 2500
logisticGrowthModel <- function(r, K, population) {
for (i in seq(1,12)) {
population <- population +  r * population * ((K - population)/K)
print(population)
}
}
logisticGrowthModel(.8, 10000, 2500)
logisticGrowthModel <- function(r, K, population, time) {
abundance <- for (i in time) {
population <- population +  r * population * ((K - population)/K)
print(population)
}
plot(time, abundance)
return(abundance)
}
logisticGrowthModel(.8, 10000, 2500, seq(1:12))
plot(time , abundance)
logisticGrowthModel <- function(r, K, population, time) {
abundance <- for (i in time) {
population <- population +  r * population * ((K - population)/K)
print(population)
}
plot(time, abundance)
return(abundance)
plot(time , abundance)
}
logisticGrowthModel(.8, 10000, 2500, seq(1:12))
time <- seq(1:12)
time <- seq(1:12)
#^year if a loop is equivalent to seq(1,12)
K <- 10000
#^pop carrying capacity
r <- .8
#^instrisic growth rate
population1 <- 2500
#^ n[1] initial population size at first time  = 2500
# n[t] = n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
# n[1] = n[0] + .8 * n[0] * (10000-n[0]/10000) = 2500
# n[0] + .8n[0] * ((10000/10000) * (-n[0]/10000)) = 2500
# 1n[0] + .8n[0] * (1 * (-n[0]/10000)) = 2500
# 1n[0] + .8 n[0] -.8 ((n[0]^2) /10000) = 2500
# (-.8/10000) n[0]^2 + 1.8 n[0] -2500 = 0
# quadratic formula : n[0] = 1487.19 or 21012.8 since it is a positive growth rate population increases each year indicating 1487.19 < 2500
population <- 1487.19
# prediction population12 ~ super close to the carrying capacity because of large (almost 1) growth rate~ 10000
for (i in seq(1,12)) {
population <- population +  r * population * ((K - population)/K)
print(population)
}
abundance <- c(2500.003,
4000.005,
5920.005,
7852.293,
9201.447,
9789.274,
9954.302,
9990.693,
9998.132,
9999.626,
9999.925,
9999.985)
plot(time , abundance)
logisticGrowthModel <- function(r, K, population, time) {
abundance <- for (i in time) {
population <- population +  r * population * ((K - population)/K)
print(population)
}
plot(time, abundance)
return(abundance)
plot(time , abundance)
}
logisticGrowthModel(.8, 10000, 2500, seq(1:12))
logisticGrowthModel <- function(r, K, population, time) {
abundance <- for (i in time) {
population <- population +  r * population * ((K - population)/K)
print(population)
}
return(abundance)
plot(time, abundance)
}
logisticGrowthModel(.8, 10000, 2500, seq(1:12))
logisticGrowthModel(.8, 10000, 2500, seq(2:12))
logisticGrowthModel(.8, 10000, 2500, seq(1:11))
logisticGrowthModel <- function(r, K, population, time) {
abundance <- for (i in time) {
population <- population +  r * population * ((K - population)/K)
print(population)
}
abundance <- c(abundance)
return(abundance)
plot(time, abundance)
}
logisticGrowthModel(.8, 10000, 2500, seq(1:11))
logisticGrowthModel <- function(r, K, population, time) {
abundance <- for (i in time) {
population <- population +  r * population * ((K - population)/K)
print(population)
}
abundance <- c(abundance)
plot(time, abundance)
return(abundance)
}
logisticGrowthModel(.8, 10000, 2500, seq(1:12))
#function
logisticGrowthModel <- function(r, K, population, time) {
abundance <- for (i in time) {
population <- population +  r * population * ((K - population)/K)
print(population)
}
abundance <- c(abundance)
plot(time, abundance)
return(abundance)
}
#try function
logisticGrowthModel(.8, 10000, 2500, seq(1:12))
logisticGrowthModel <- function(r, K, population, time) {
abundance <- rep(population, length(time))
for (i in time) {
population <- population +  r * population * ((K - population)/K)
abundance[i] <- population
}
plot(time, abundance)
return(abundance)
}
logisticGrowthModel(.8, 10000, 2500, seq(1:12))
#function
logisticGrowthModel <- function(r, K, population, generations) {
abundance <- rep(population, length(generations))
for (i in generations) {
population <- population +  r * population * ((K - population)/K)
abundance[i] <- population
}
plot(generations, abundance)
myResults <- cbind(generations, abundance)
setwd("/Users/deannagallegospayne/CompBio/CompBioLabsAndHomework/Labs/Lab08")
write.csv(x = myResults, file = "Lab08.csv")
return(abundance)
}
#try function
logisticGrowthModel(.8, 10000, 2500, seq(1:12))
#function
logisticGrowthModel <- function(r, K, population, generations) {
abundance <- rep(population, length(generations))
for (i in generations) {
population <- population +  r * population * ((K - population)/K)
abundance[i] <- population
}
plot(generations, abundance)
myResults <- cbind(generations, abundance)
setwd("/Users/deannagallegospayne/CompBio/CompBioLabsAndHomework/Labs/Lab08")
write.csv(x = myResults, file = "Lab08.csv")
return(abundance)
}
#function
logisticGrowthModel <- function(r, K, population, generations) {
abundance <- rep(population, length(generations))
for (i in generations) {
population <- population +  r * population * ((K - population)/K)
abundance[i] <- population
}
plot(generations, abundance)
myResults <- cbind(generations, abundance)
setwd("/Users/deannagallegospayne/CompBio/CompBioLabsAndHomework/Labs/Lab08")
write.csv(x = myResults, file = "Lab08.csv")
return(abundance)
}
abundance <- rep(population, length(generations)
abundance
logisticGrowthModel(.8, 10000, 2500, seq(1:12))
abundance <- rep(population, length(generations)
q
rep(population, length(generations))
population <- 2500
rep(population, length(generations))
generations <- seq(1:12)
rep(population, length(generations))
?return
return(abundance)
#function
logisticGrowthModel <- function(r, K, population, generations) {
abundance <- rep(population, length(generations))
for (i in generations) {
population <- population +  r * population * ((K - population)/K)
abundance[i] <- population
}
plot(generations, abundance)
myResults <- cbind(generations, abundance)
setwd("/Users/deannagallegospayne/CompBio/CompBioLabsAndHomework/Labs/Lab08")
write.csv(x = myResults, file = "Lab08.csv")
return(abundance)
}
#try function
logisticGrowthModel(.8, 10000, 2500, seq(1:12))
