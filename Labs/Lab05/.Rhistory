c5 <- rep (0, 18)
c5[1] <- 1
c5
for (i in seq(2:19)) {
c5 <- c5 * 2 + 1
print(1, c5)
}
c5 <- rep (0, 18)
c5[1] <- 1
c5
for (i in seq(2:19)) {
c5 <- c5 * 2 + 1
print(c5 , 1)
}
c5 <- rep (0, 18)
c5[1] <- 1
c5
#5d: loop for [1 + (2 * previous entry)]
for (i in seq(2:19)) {
c5 <- c5 * 2 + 1
print(c5)
}
for (i in seq(2:19)) {
c5 <- c5[(i + 1) * 2]
print(c5)
}
c5 <- rep (0, 18)
c5[1] <- 1
c5
for (i in seq(2:19)) {
c5 <- c5[(i + 1) * 2]
print(c5)
}
c5 <- rep (0, 18)
c5[1] <- 1
c5
for (i in seq(2:19)) {
c5 <- c5[(i * 2) + 1]
print(c5)
}
fib[1] <- 1
fib[2] <- 1
fib <- rep_len(1, 20)
fib[1] <- 0
fib[2] <- 1
fib
for(i in 3:20) {
fib[i] <- fib[i-1] + fib[i-2]
print(fib[i])
}
fib <- rep_len(1, 20)
fib[1] <- 0
fib[2] <- 1
fib
for(i in 2:20) {
fib[i] <- fib[i-1] + fib[i-2]
print(fib[i])
}
for(i in 3:20) {
fib[i] <- fib[i-1] + fib[i-2]
print(fib[i])
}
fib <- rep_len(1, 20)
fib[1] <- 0
fib[2] <- 1
fib
for(i in 3:20) {}
for(i in 3:20) {
fib <- (fib - 1)  + (fib - 2)
print(fib)
}
c5 <- rep (0, 18)
c5[1] <- 1
c5
for (i in seq(2:19)) {
c5 <- c5[i + 1] + c5[i * 2]
print(c5)
}
for (i in seq(2:19)) {
c5 <- c5[i + 1] + c5[i * 2]
print(c5[i])
}
c5 <- rep (0, 18)
c5[1] <- 1
c5
for (i in seq(2:19)) {
c5 <- c5[i + 1] + c5[i * 2]
print(c5[i])
}
fib[1] <- 0
fib[2] <- 1
fib
fib <- rep_len(1, 20)
fib[1] <- 0
fib[2] <- 1
fib
for(i in 3:20) {
fib[i] <- fib[i-1] + fib[i-2]
print(fib[i])
}
t <- 12
#^year if a loop is equivalent to seq(1,12)
K <- 10000
#^pop carrying capacity
r <- .8
#^instrisic growth rate
population1 <- 2500
#^ n[1] initial population size at first time period 0 = 2500
# n[t] = n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
# n[1] = n[0] + .8 * n[0] * (10000-n[0]/10000) = 2500
# n[0] + .8n[0] * ((10000/10000) * (-n[0]/10000)) = 2500
# 1n[0] + .8n[0] * (1 * (-n[0]/10000)) = 2500
# 1n[0] + .8 n[0] -.8 ((n[0]^2) /10000) = 2500
# (-.8/10000) n[0]^2 + 1.8 n[0] -2500 = 0
# quadratic formula : n[0] = 1487.19 or 21012.8 since it is a positive growth rate population increases each year indicating 1487.19 < 2500
population <- 1487.19
# prediction population12 ~ super close to the carrying capacity because of large (almost 1) growth rate~ 10000
for (i in seq(1,12)) {
population <- population +  r * population * ((K - population)/K)
print(population)}
col(population, as.factor = 'time')
seq(1:12)
seq(1,12)
time <- seq(1:12)
plot(time , population)
# n[t] = n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
# for (i in seq(1,12)) {
population <- population +  r * population * ((K - population)/K)
print(population)}
population
for (i in seq(1,12)) {
population <- time[i-1] +  r * time[i-1] * ((K - time[i-1])/K)
print(population)}
time
time <- seq(1:12)
#^year if a loop is equivalent to seq(1,12)
K <- 10000
#^pop carrying capacity
r <- .8
#^instrisic growth rate
population1 <- 2500
#^ n[1] initial population size at first time period 0 = 2500
# n[t] = n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
# n[1] = n[0] + .8 * n[0] * (10000-n[0]/10000) = 2500
# n[0] + .8n[0] * ((10000/10000) * (-n[0]/10000)) = 2500
# 1n[0] + .8n[0] * (1 * (-n[0]/10000)) = 2500
# 1n[0] + .8 n[0] -.8 ((n[0]^2) /10000) = 2500
# (-.8/10000) n[0]^2 + 1.8 n[0] -2500 = 0
# quadratic formula : n[0] = 1487.19 or 21012.8 since it is a positive growth rate population increases each year indicating 1487.19 < 2500
population <- 1487.19
# prediction population12 ~ super close to the carrying capacity because of large (almost 1) growth rate~ 10000
abundance <- for (i in seq(1,12)) {
population <- population +  r * population * ((K - population)/K)
print(population)}
plot(abundance)
?plot
plot(time, abundance)
abundance
time <- seq(1:12)
K <- 10000
r <- .8
population1 <- 2500
population <- 1487.19
for (i in seq(1,12)) {
population <- population +  r * population * ((K - population)/K)
print(population)}
time <- seq(1:12)
K <- 10000
r <- .8
population1 <- 2500
population <- 1487.19
for (i in seq(1,12)) {
population <- population +  r * population * ((K - population)/K)
print(population)
plot(time, population)
}
plot(, population)
plot(population, population)
population <- 1487.19
for (i in seq(1,12)) {
population <- population +  r * population * ((K - population)/K)
print(population)
}
require(ggplot2)
c5 <- rep (0, 18)
c5[1] <- 1
c5
#5d: loop for [1 + (2 * previous entry)]
for (i in seq(2:19)) {
c5 <- c5 * 2 + 1
print(c5)
}
library(ggplot2)
for (i in seq(1,12)) {
population <- population +  r * population * ((K - population)/K)
print(population)
ggplot(population)
}
c(population)
abundance <- seq(2500.003,
4000.005,
5920.005,
7852.293,
9201.447,
9789.274,
9954.302,
9990.693,
9998.132,
9999.626,
9999.925,
9999.985)
abundance <- c(2500.003,
4000.005,
5920.005,
7852.293,
9201.447,
9789.274,
9954.302,
9990.693,
9998.132,
9999.626,
9999.925,
9999.985)
plot(time , population)
plot(time , abundance)
for (i in seq(1,12)) {
population <- population +  r * population * ((K - population)/K)
print(population)
}
population <- 1487.19
for (i in seq(1,12)) {
population <- population +  r * population * ((K - population)/K)
print(population)
ggplot(population)}
c5 <- rep (0, 18)
c5[1] <- 1
c5
#5d: loop for [1 + (2 * previous entry)]
for (i in seq(2:19)) {
c5 <- c5 * 2 + 1
print(c5)
}
c5 <- rep (0, 18)
c5[1] <- 1
c5
#5d: loop for [1 + (2 * previous entry)]
for (i in 2:19) {
c5 <- c5 * 2 + 1
print(c5)
}
c5 <- rep (0, 18)
c5[1] <- 1
c5
for (i in seq(2:19)) {
c5 <- (1+ 2 * c5[i-1])
print(c5)
}
c5 <- rep (0, 18)
c5[1] <- 1
c5
#5d: loop for [1 + (2 * previous entry)]
for (i in seq(2:19)) {
c5 <- (1+ 2 * c5[i-1])
print(c5)
}
c5 <- rep (0, 18)
c5[1] <- 1
c5
#5d: loop for [1 + (2 * previous entry)]
for (i in seq(2:19)) {
c5 <- (1+ (2 * c5[i-1]))
print(c5)
}
c5 <- rep (0, 18)
c5[1] <- 1
c5
#5d: loop for [1 + (2 * previous entry)]
for (i in seq(2:18)) {
c5[i] <- (1+ (2 * c5[i-1]))
print(c5)
}
#5c: 2nd try_ change the first digit in the sequence
c5 <- rep (0, 18)
c5[1] <- 1
c5
#5d: loop for [1 + (2 * previous entry)]
for (i in seq(2,18)) {
c5[i] <- (1+ (2 * c5[i-1]))
print(c5)
}
print(c5)
plot7 <- plot(time , abundance)
show(plot7)
plot7
plot7 <- plot(time , abundance)
plot7
5 > 4
5 > 4
5 > 4
5 >= 4
5 > 4
5 < 4
5 <= 4
5 != 4
5 == 4
>= greater than or equal to
> greater than
< less than
<= less than or equal to
!= not equal to
== are equal
>= greater than or equal to
> greater than
< less than
<= less than or equal to
!= not equal to
== are equal
5 >= 4
#TRUE
5 > 4
#TRUE
5 < 4
#FALSE
5 <= 4
#FALSE
5 != 4
#TRUE
5 == 4
#FALSE
echo"I would like $x cookies"
Sys.time()
x <- 22
if(x > 5) {
print("result is larger than 5")
} else {
print("result is smaller than 5")
}
setwd("~/CompBio/compBioSandbox/CompBio_on_git/Labs/Lab05/")
Vector1 <- read.csv("Vector1.csv")
Vector1.2a <- Vector1$x
for( i in 1:length(Vector1.2a)) {
if ( Vector1.2a[i] < 0) {
Vector1.2a[i] <- NA
}
}
is.na(Vector1.2a)
Vector1.2a[is.na(Vector1.2a)] <- NaN
Vector1.2a
Vector1.2b <- which(is.na(Vector1.2a))
Vector1.2a[Vector1.2b] <- NaN
Vector1.2c <- which(is.nan(Vector1.2a))
Vector1.2a[Vector1.2c] <- 0
FiftytoOneHundred <- subset(Vector1.2a, Vector1.2a >= 50 & Vector1.2a <=100)
length(FiftytoOneHundred)
setwd("/Users/deannagallegospayne/CompBio/CompBioLabsAndHomework/Labs/Lab05")
write.csv(x = FiftytoOneHundred, file = "FiftytoOneHundred")
setwd("/Users/deannagallegospayne/CompBio/compBioSandbox/CompBio_on_git/Labs/Lab04")
CO2_data_cut_paste <- read.csv("CO2_data_cut_paste.csv")
Gasnonzero <- subset(CO2_data_cut_paste, Gas >= 1)
show(Gasnonzero[1,1])
TotalEmissions <- subset(CO2_data_cut_paste, Total >= 200 & Total <= 300)
show(TotalEmissions[1])
totalGenerations <- 1000
initPrey <- 100 	# initial prey abundance at time t = 1
initPred <- 10		# initial predator abundance at time t = 1
a <- 0.01 		# attack rate
r <- 0.2 		# growth rate of prey
m <- 0.05 		# mortality rate of predators
k <- 0.1 		# conversion constant of prey into predators
time <- rep(1:1000)
prey <- rep_len(0, 1000)
prey[1] <- initPrey
pred <- rep_len(0, 1000)
pred[1] <- initPred
for(t in seq (2 , 1000)) {
prey[t] <- prey[t-1] + (r * prey[t-1]) - (a * prey[t-1] * pred[t-1])
pred[t] <- pred[t-1] + (k * a * prey[t-1] * pred[t-1]) - (m * pred[t-1])
if( pred[t] < 0) {
pred[t] <- 0
}
if(prey[t] < 0) {
prey[t] <- 0
}
}
plot(time, prey)
lines(time, pred, col = "green")
columnnames <- c("TimeStep", "PreyAbundance", "PredatorAbundance")
?cbind
?matrix
?rbind
myResults <- matrix(time, prey, pred)
myResults
columnnames(myResults) <- c("TimeStep", "PreyAbundance", "PredatorAbundance")
myResults <- matrix((time:prey:pred), dimnames = list(c("TimeStep", "PreyAbundance", "PredatorAbundance")))
myResults <- matrix(time, dimnames = c("TimeStep")) + matrix(prey, dimnames = c("PreyAbundance")) + matrix(pred, dimnames = "PredatorAbundace")
myResults <- matrix(time) + matrix(prey) + matrix(pred)
colnames(myResults) <- c("TimeStep", "PreyAbundance", "PredatorAbundance")))
colnames(myResults) <- c("TimeStep", "PreyAbundance", "PredatorAbundance")
myResults <- matrix(time) + matrix(prey) + matrix(pred)
myResults
myResults <- cbind(time, prey, pred)
View(myResults)
`colnames<-`(c("TimeStep", "PreyAbundance", "PredatorAbundance"))
colnames(myResults) <- c("TimeStep", "PreyAbundance", "PredatorAbundance")
View(myResults)
View(myResults)
setwd("/Users/deannagallegospayne/CompBio/CompBioLabsAndHomework/Labs/Lab05")
write.csv(x = myResults, file = "PredPreyResults.csv")
show(myResults)
for(t in seq (2 , 1000)) {
prey[t] <- prey[t-1] + (r * prey[t-1]) - (a * prey[t-1] * pred[t-1])
pred[t] <- pred[t-1] + (k * a * prey[t-1] * pred[t-1]) - (m * pred[t-1])
if( pred[t] < 0) {
pred[t] <- 0
}
if(prey[t] < 0) {
prey[t] <- 0
}
}
show(pred)
#title: Lab05
#author: Deanna Payne
#date: 2/15/2019
Sys.time()
#Part1
##1.1 create x
x <- 22
if(x > 5) {
print("result is larger than 5")
} else {
print("result is smaller than 5")
}
##1.2 import "Vector1.csv"
setwd("~/CompBio/compBioSandbox/CompBio_on_git/Labs/Lab05/")
Vector1 <- read.csv("Vector1.csv")
Vector1.2a <- Vector1$x
##1.2a
for( i in 1:length(Vector1.2a)) {
if ( Vector1.2a[i] < 0) {
Vector1.2a[i] <- NA
}
}
##1.2b. replace all those `NA` values with `NaN`
is.na(Vector1.2a)
Vector1.2a[is.na(Vector1.2a)] <- NaN
Vector1.2a
###or
Vector1.2b <- which(is.na(Vector1.2a))
####Vector1.2b gives POSITIONS for 'NA' values i.e. "TRUE" values that are NA
Vector1.2a[Vector1.2b] <- NaN
####^ asks all positions recognized by Vector1.2b to be changed to NaN within the overall Vector1.2a
##1.2c
Vector1.2c <- which(is.nan(Vector1.2a))
Vector1.2a[Vector1.2c] <- 0
##1.2d and 1.2e
###1.2e create a new vector of data that has all the values from the imported data that fall in the range between 50 and 100
FiftytoOneHundred <- subset(Vector1.2a, Vector1.2a >= 50 & Vector1.2a <=100)
###1.2d how many of the values from the imported data fall in the range between 50 and 100
length(FiftytoOneHundred)
##1.2f
setwd("/Users/deannagallegospayne/CompBio/CompBioLabsAndHomework/Labs/Lab05")
write.csv(x = FiftytoOneHundred, file = "FiftytoOneHundred")
##1.3
setwd("/Users/deannagallegospayne/CompBio/compBioSandbox/CompBio_on_git/Labs/Lab04")
CO2_data_cut_paste <- read.csv("CO2_data_cut_paste.csv")
##1.3a first year on "Gas" non-zero Emmissions
Gasnonzero <- subset(CO2_data_cut_paste, Gas >= 1)
show(Gasnonzero[1,1])
##1.3b During which years were "Total" emissions between 200 and 300 million metric tons of carbon?
TotalEmissions <- subset(CO2_data_cut_paste, Total >= 200 & Total <= 300)
show(TotalEmissions[1])
#Part2
#### n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
#####`n[t]` represents the abundance of prey at time `t`
#### p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
#####`p[t]` the abundance of predators at time `t`.
##2.1 set up parameters
totalGenerations <- 1000
initPrey <- 100 	# initial prey abundance at time t = 1
initPred <- 10		# initial predator abundance at time t = 1
a <- 0.01 		# attack rate
r <- 0.2 		# growth rate of prey
m <- 0.05 		# mortality rate of predators
k <- 0.1 		# conversion constant of prey into predators
##2.2 create a "time" vector, and make two additional vectors to store results, one for the values of `n` over time, and the other to store values of `p`.
time <- rep(1:1000)
###^ 1000 generations
prey <- rep_len(0, 1000)
prey[1] <- initPrey
pred <- rep_len(0, 1000)
pred[1] <- initPred
##2.3 Loop that implements calculations
for(t in seq (2 , 1000)) {
prey[t] <- prey[t-1] + (r * prey[t-1]) - (a * prey[t-1] * pred[t-1])
pred[t] <- pred[t-1] + (k * a * prey[t-1] * pred[t-1]) - (m * pred[t-1])
if( pred[t] < 0) {
pred[t] <- 0
}
if(prey[t] < 0) {
prey[t] <- 0
}
}
##2.5 plot  prey and predators over time
plot(time, prey)
lines(time, pred, col = "green")
##2.6 create a matrix of your results named "myResults" in which the first column is named "TimeStep", the second column is named "PreyAbundance", and the third column is named "PredatorAbundance".
myResults <- cbind(time, prey, pred)
colnames(myResults) <- c("TimeStep", "PreyAbundance", "PredatorAbundance")
##2.6 Write this matrix to a csv in your Lab05 working directory with the command `write.csv(x = myResults, file = "PredPreyResults.csv")`
setwd("/Users/deannagallegospayne/CompBio/CompBioLabsAndHomework/Labs/Lab05")
write.csv(x = myResults, file = "PredPreyResults.csv")
show(pred)
